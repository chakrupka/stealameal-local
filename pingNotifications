// Push notifications for "pinging" your friends
// credit to Dan's React Lab, followed his tutorial at https://www.youtube.com/watch?v=V-hois8dgM4

import { useState, useEffect, useRef } from "react";

import * as Device from "expo-device";
import * as Notifications from "expo-notifications";

import Constants from "expo-constants";

import { Platform } from "react-native";

// refactored docs into a hook
export interface PingState {
    notification?: Notifications.Notification;
    expoPushToken?: Notifications.ExpoPushToken
}

export const usePushNotifications = (): PingState => {
    Notifications.setNotificationHandler({
        handleNotification: async () => ({
            shouldPlaySound: true,
            shouldShowAlert: true,
            shouldSetBadge: false,
        })
    })

    const [expoPushToken, setExpoPushToken] = useState <
        Notifications.ExpoPushToken | undefined
    >();

    const [notification, setNotification] = useState <
        Notifications.ExpoPushToken | undefined
    >()

    const notificationListener = useRef<Notifications.Subscription>();
    const responseListener = useRef<Notifications.Subscription>();

    // main function for our push notification -- set up permissions, get listeners and tokens initiatialized
    async function registerForPushNotificationsAsync {
        let token;

        if(!Device.isDevice || Device.isDevice) {
            const {status: existingStatus} = 
              await Notifications.getPermissionsAsync();

            let finalStatus = existingStatus;

            if (existingStatus !== "granted") {
                const { status } = await Notifications.requestPermissionsAsync();
                finalStatus = status;
            }
            if (finalStatus !== "granted") {
                alert("Failed to get push token");
            }

            token = await Notifications.getExpoPushTokenAsync({
                projectID: Constants.expoConfig.extra?.eas?.projectID,
            });

            // for android only: muting certain notification channels
            if(Platform.OS === 'android') {
                Notifications.setNotificationChannelAsync("default", {
                    mname: "default"
                    importance: Notifications.AndroidImportance.MAX,
                    vibrationPattern: [0, 250, 250, 250],
                    lightColor: "#096A2E",
                });
            }

            return token;

        } else {
            console.log("error: idk what kind of device this is")
        }
    }

    // set up listeners, 
    useEffect(() => {
        registerForPushNotificationsAsync().then((token) => {
            setExpoPushToken(token);
        });

        notificationListener.current = Notifications.addNotificationResponseReceivedListener((notification) => {
            setNotification(notification);
        });

        responseListener.current = Notifications.addNotificationResponseReceivedListener((response) => {
            console.log(response);
        });

    })

;}
